<?xml version="1.0" encoding="UTF-8"?>
<x:description xmlns:x="http://www.jenitennison.com/xslt/xspec" xmlns:svg="http://www.w3.org/2000/svg"
  xmlns:t="https://schema.expertml.com/svg/trees" stylesheet="XMLtoTree.xsl">
  
  <x:scenario label="When transforming in TreeBox mode">
    <x:context mode="t:box"/>
    <x:scenario label="Given some input XML">
      <x:context>
        <subj-group>
          <subject>Primary care</subject>
          <subj-group>
            <subject>190</subject>
            <subject>10</subject>
            <subject>218</subject>
            <subject>219</subject>
            <subject>355</subject>
            <subject>357</subject>
          </subj-group>
        </subj-group>
      </x:context>
      <x:expect label="Output the following SVG">
        <svg xmlns="http://www.w3.org/2000/svg">
          <style type="text/css">text {font-family: Consolas, Monaco, "Andale Mono", "Ubuntu Mono", monospace;}</style>
          <rect x="0em" y="0em" width="14em" height="35em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="1em" y="2em">subj-group</text>
          <rect x="1em" y="3em" width="12em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="2em" y="5em">subject</text>
          <rect x="1em" y="7em" width="12em" height="27em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="2em" y="9em">subj-group</text>
          <rect x="2em" y="10em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="12em">subject</text>
          <rect x="2em" y="14em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="16em">subject</text>
          <rect x="2em" y="18em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="20em">subject</text>
          <rect x="2em" y="22em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="24em">subject</text>
          <rect x="2em" y="26em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="28em">subject</text>
          <rect x="2em" y="30em" width="10em" height="3em" fill="white" stroke="black" stroke-width="2px"/>
          <text x="3em" y="32em">subject</text>
        </svg>
      </x:expect>
    </x:scenario>
  </x:scenario>
  
  <x:scenario label="When transforming in Vertical Tree mode">
    <x:context mode="t:vertical"/>
    <x:scenario label="Given some input XML">
      <x:context>
        <subj-group>
          <subject>Primary care</subject>
          <subj-group>
            <subject1>190</subject1>
            <subject>10</subject>
          </subj-group>
          <subject>218</subject>
        </subj-group>
      </x:context>
      <x:scenario label="Then create a text element for each node">
        <x:expect label="...with y = 2 * docOrderNumber" test="/svg:svg/svg:text[4]/@y/string()" select="'8em'"/>
        <x:expect label="...with y = 2 * docOrderNumber" test="/svg:svg/svg:text[5]/@y/string()" select="'10em'"/>
        <x:expect label="...with y = 2 * docOrderNumber" test="/svg:svg/svg:text[6]/@y/string()" select="'12em'"/>
        <x:expect label="...with x = nodeDepth + 1 em" test="/svg:svg/svg:text[7]/@x/string()" select="'3em'"/>
        <x:expect label="...with the element name as the value" test="/svg:svg/svg:text[4]/string()" select="'subj-group'"/>
        <x:expect label="...with the element name as the value" test="/svg:svg/svg:text[5]/string()" select="'subject1'"/>
      </x:scenario>
      <x:scenario label="Then create a vertical line for each node">
        <x:expect label="...which is vertical" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[2]/@x1 = /svg:svg/svg:text[6]/preceding-sibling::svg:line[2]/@x2"/>
        <x:expect label="...with x = nodeDepth" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[2]/@x1/string()" select="'3em'"/>
        <x:expect label="...which starts 0.2em above the baseline of the preceding sibling text (if present)" test="/svg:svg/svg:text[7]/preceding-sibling::svg:line[2]/@y1/string()" select="'7.8em'"/>
        <x:expect label="...which starts 0.2em below the baseline of the parent text (if no preceding sibline)" test="/svg:svg/svg:text[5]/preceding-sibling::svg:line[2]/@y1/string()" select="'8.2em'"/>
        <x:expect label="...which finishes 0.2em above the baseline of the text as given by docOrderNumber" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[2]/@y2/string()" select="'11.8em'"/>
      </x:scenario>
      <x:scenario label="Then create a horizontal line for each node">
        <x:expect label="...with class 'structure'" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@class/string()" select="'structure'"/>
        <x:expect label="...starting at nodeDepth em" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@x1/string()" select="'3em'"/>
        <x:expect label="...0.8em long" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@x2/string()" select="'3.8em'"/>
        <x:expect label="...which is horizontal" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@y1 = /svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@y2"/>
        <x:expect label="...0.2em above the baseline of the text as given by docOrderNumber" test="/svg:svg/svg:text[6]/preceding-sibling::svg:line[1]/@y1/string()" select="'11.8em'"/>
      </x:scenario>
    </x:scenario>
    <x:scenario label="given some input XML (B)">
      <x:context>
        <db>
          <journals>
            <marketing/>
          </journals>
          <books/>
          <blogs/>
        </db>
      </x:context>
      <x:expect label="then output some valid svg">
        <svg:svg>...</svg:svg>
      </x:expect>
    </x:scenario>
  </x:scenario>
   
</x:description>
